import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

// Configuration des notifications
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: false, // Pas d'alerte pour les mises √† jour
    shouldPlaySound: false, // Pas de son pour les mises √† jour
    shouldSetBadge: false,
  }),
});

export interface NavigationStep {
  instruction: string;
  distance: number;
  duration: number;
  maneuver: string;
  streetName?: string;
}

export interface NavigationProgress {
  currentStepIndex: number;
  totalSteps: number;
  remainingDistance: number;
  totalDistance: number;
  remainingTime: number;
  totalTime: number;
  progressPercentage: number;
}

export class NavigationNotificationService {
  private static notificationId: string | null = null;
  private static isNavigationActive = false;
  private static lastNotificationContent: string | null = null;
  private static updateThrottleTimeout: NodeJS.Timeout | null = null;
  private static pendingUpdate: boolean = false;
  
  // Seuils pour d√©cider quand mettre √† jour la notification
  private static readonly UPDATE_THRESHOLDS = {
    DISTANCE_CHANGE: 50, // Mettre √† jour si la distance change de plus de 50m
    TIME_INTERVAL: 10000, // Mettre √† jour au maximum toutes les 10 secondes
    STEP_CHANGE: true, // Toujours mettre √† jour lors d'un changement d'√©tape
    SIGNIFICANT_PROGRESS: 5, // Mettre √† jour si le pourcentage de progression change de plus de 5%
  };

  private static lastUpdateData = {
    distance: 0,
    stepIndex: -1,
    progressPercentage: 0,
    lastUpdateTime: 0,
  };

  // Demander les permissions de notification
  static async requestPermissions(): Promise<boolean> {
    try {
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.log('Permissions de notification refus√©es');
        return false;
      }

      // Configuration pour Android
      if (Platform.OS === 'android') {
        try {
          await Notifications.setNotificationChannelAsync('navigation', {
            name: 'Navigation',
            importance: Notifications.AndroidImportance.HIGH,
            vibrationPattern: [0, 250, 250, 250],
            lightColor: '#007AFF',
            lockscreenVisibility: Notifications.AndroidNotificationVisibility.PUBLIC,
            bypassDnd: true,
            description: 'Notifications pour les instructions de navigation',
            enableLights: true,
            enableVibrate: true,
          });
        } catch (channelError) {
          console.log('Erreur lors de la cr√©ation du canal de notification:', channelError);
        }
      } 

      return true;
    } catch (error) {
      console.log('Erreur lors de la demande de permissions de notification:', error);
      return false;
    }
  }

  // D√©marrer les notifications de navigation
  static async startNavigationNotifications(): Promise<void> {
    this.isNavigationActive = true;
    this.lastNotificationContent = null;
    this.lastUpdateData = {
      distance: 0,
      stepIndex: -1,
      progressPercentage: 0,
      lastUpdateTime: 0,
    };
    console.log('Notifications de navigation d√©marr√©es');
  }

  // Arr√™ter les notifications de navigation
  static async stopNavigationNotifications(): Promise<void> {
    this.isNavigationActive = false;
    
    // Annuler le throttling en cours
    if (this.updateThrottleTimeout) {
      clearTimeout(this.updateThrottleTimeout);
      this.updateThrottleTimeout = null;
    }
    
    try {
      if (this.notificationId) {
        await Notifications.dismissNotificationAsync(this.notificationId);
        this.notificationId = null;
      }
    } catch (error) {
      console.log('Erreur lors de l\'arr√™t des notifications:', error);
    }
    
    this.lastNotificationContent = null;
    console.log('Notifications de navigation arr√™t√©es');
  }

  // V√©rifier si une mise √† jour est n√©cessaire
  private static shouldUpdateNotification(
    currentStep: NavigationStep,
    progress: NavigationProgress
  ): boolean {
    const now = Date.now();
    const timeSinceLastUpdate = now - this.lastUpdateData.lastUpdateTime;

    // Toujours mettre √† jour lors du changement d'√©tape
    if (progress.currentStepIndex !== this.lastUpdateData.stepIndex) {
      console.log('üîî Mise √† jour n√©cessaire: changement d\'√©tape');
      return true;
    }

    // Mettre √† jour si la distance change significativement
    const distanceChange = Math.abs(currentStep.distance - this.lastUpdateData.distance);
    if (distanceChange >= this.UPDATE_THRESHOLDS.DISTANCE_CHANGE) {
      console.log('üîî Mise √† jour n√©cessaire: changement de distance significatif');
      return true;
    }

    // Mettre √† jour si le pourcentage de progression change significativement
    const progressChange = Math.abs(progress.progressPercentage - this.lastUpdateData.progressPercentage);
    if (progressChange >= this.UPDATE_THRESHOLDS.SIGNIFICANT_PROGRESS) {
      console.log('üîî Mise √† jour n√©cessaire: changement de progression significatif');
      return true;
    }

    // Mettre √† jour p√©riodiquement (mais pas trop souvent)
    if (timeSinceLastUpdate >= this.UPDATE_THRESHOLDS.TIME_INTERVAL) {
      console.log('üîî Mise √† jour n√©cessaire: intervalle de temps atteint');
      return true;
    }

    return false;
  }

  // Afficher/mettre √† jour la notification de navigation avec throttling
  static async showNavigationNotification(
    currentStep: NavigationStep,
    progress: NavigationProgress
  ): Promise<void> {
    if (!this.isNavigationActive) return;

    // V√©rifier si une mise √† jour est n√©cessaire
    if (!this.shouldUpdateNotification(currentStep, progress)) {
      return;
    }

    // Si une mise √† jour est d√©j√† en cours, marquer qu'une autre est n√©cessaire
    if (this.updateThrottleTimeout) {
      this.pendingUpdate = true;
      return;
    }

    // Effectuer la mise √† jour imm√©diatement
    await this.performNotificationUpdate(currentStep, progress);

    // Programmer le prochain check avec throttling
    this.updateThrottleTimeout = setTimeout(() => {
      this.updateThrottleTimeout = null;
      
      // Si une mise √† jour est en attente, l'effectuer maintenant
      if (this.pendingUpdate) {
        this.pendingUpdate = false;
        this.showNavigationNotification(currentStep, progress);
      }
    }, 2000); // Minimum 2 secondes entre les mises √† jour
  }

  // Effectuer la mise √† jour r√©elle de la notification
  private static async performNotificationUpdate(
    currentStep: NavigationStep,
    progress: NavigationProgress
  ): Promise<void> {
    try {
      const hasPermission = await this.requestPermissions();
      if (!hasPermission) return;

      const notificationContent = this.createNotificationContent(currentStep, progress);
      
      // Ne pas mettre √† jour si le contenu n'a pas chang√©
      if (notificationContent.fullBody === this.lastNotificationContent) {
        return;
      }

      // D√©termine si c'est la premi√®re notification ou une mise √† jour
      const isNewStep = progress.currentStepIndex !== this.lastUpdateData.stepIndex;
      const shouldPlaySound = isNewStep && this.notificationId !== null; // Son uniquement pour nouveau step, pas pour la premi√®re

      // Configuration de la notification
      const notificationConfig = {
        content: {
          title: notificationContent.title,
          body: notificationContent.fullBody,
          data: {
            type: 'navigation',
            step: currentStep,
            progress,
            updateTime: Date.now(),
          },
          priority: Notifications.AndroidNotificationPriority.HIGH,
          sticky: true,
          categoryIdentifier: 'navigation',
          sound: shouldPlaySound ? 'default' : false,
          ...(Platform.OS === 'android' && {
            channelId: 'navigation',
          }),
        },
        trigger: null,
      };

      // Si une notification existe d√©j√†, la remplacer silencieusement
      if (this.notificationId) {
        // Mettre √† jour la notification existante
        this.notificationId = await Notifications.scheduleNotificationAsync(notificationConfig);
      } else {
        // Cr√©er la premi√®re notification (avec son si configur√©)
        notificationConfig.content.sound = 'default';
        this.notificationId = await Notifications.scheduleNotificationAsync(notificationConfig);
      }

      // Mettre √† jour les donn√©es de r√©f√©rence
      this.lastNotificationContent = notificationContent.fullBody;
      this.lastUpdateData = {
        distance: currentStep.distance,
        stepIndex: progress.currentStepIndex,
        progressPercentage: progress.progressPercentage,
        lastUpdateTime: Date.now(),
      };

      console.log('üîî Notification mise √† jour', { 
        stepIndex: progress.currentStepIndex, 
        distance: currentStep.distance,
        isNewStep 
      });

    } catch (error) {
      console.error('Erreur lors de la mise √† jour de la notification:', error);
    }
  }

  // Cr√©er le contenu de la notification
  private static createNotificationContent(
    currentStep: NavigationStep,
    progress: NavigationProgress
  ): { title: string; fullBody: string } {
    // Formater la distance
    const formatDistance = (meters: number): string => {
      if (meters < 1000) {
        return `${Math.round(meters)}m`;
      } else {
        return `${(meters / 1000).toFixed(1)}km`;
      }
    };

    // Formater le temps
    const formatTime = (seconds: number): string => {
      const minutes = Math.floor(seconds / 60);
      if (minutes < 60) {
        return `${minutes}min`;
      } else {
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        return `${hours}h${remainingMinutes > 0 ? ` ${remainingMinutes}min` : ''}`;
      }
    };

    // Obtenir l'emoji pour le type de man≈ìuvre
    const getManeuverEmoji = (maneuver: string): string => {
      const emojiMap: Record<string, string> = {
        'turn-left': '‚Ü∞',
        'turn-slight-left': '‚Üñ',
        'turn-right': '‚Ü±',
        'turn-slight-right': '‚Üó',
        'turn-sharp-left': '‚Ü∫',
        'turn-sharp-right': '‚Üª',
        'straight': '‚Üë',
        'continue': '‚Üë',
        'uturn': '‚Ü∂',
        'roundabout-left': 'üîÑ',
        'roundabout-right': 'üîÑ',
        'merge': 'üîÄ',
        'fork-left': 'üî±',
        'fork-right': 'üî±',
        'arrive': 'üèÅ',
        'destination': 'üèÅ',
        'ferry': '‚õ¥Ô∏è',
        'ramp': 'üõ£Ô∏è',
      };
      
      return emojiMap[maneuver.toLowerCase()] || 'üß≠';
    };

    // Cr√©er le titre avec emoji de man≈ìuvre
    const title = `${getManeuverEmoji(currentStep.maneuver)} Dans ${formatDistance(currentStep.distance)}`;
    
    // Cr√©er le corps de la notification
    let body = currentStep.instruction;
    if (currentStep.streetName) {
      body += ` sur ${currentStep.streetName}`;
    }
    
    // Ajouter les infos de progression
    const progressText = `üìç ${formatDistance(progress.remainingDistance)} ‚Ä¢ ‚è±Ô∏è ${formatTime(progress.remainingTime)} restant`;

    // Cr√©er une barre de progression compacte
    const progressBarLength = 15;
    const filledLength = Math.round((progress.progressPercentage / 100) * progressBarLength);
    const emptyLength = progressBarLength - filledLength;
    const progressBar = '‚ñì'.repeat(filledLength) + '‚ñë'.repeat(emptyLength);

    // Ajouter l'information d'√©tape
    const stepInfo = `üìã √âtape ${progress.currentStepIndex + 1}/${progress.totalSteps}`;

    const fullBody = `${body}\n\n${progressText}\n${stepInfo}\n${progressBar} ${progress.progressPercentage.toFixed(0)}%`;

    return { title, fullBody };
  }

  // Afficher une notification d'arriv√©e (avec son)
  static async showArrivalNotification(destinationName: string): Promise<void> {
    try {
      const hasPermission = await this.requestPermissions();
      if (!hasPermission) return;

      // Supprimer la notification de navigation active
      if (this.notificationId) {
        await Notifications.dismissNotificationAsync(this.notificationId);
        this.notificationId = null;
      }

      // Afficher la notification d'arriv√©e avec son
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üèÅ Destination atteinte !',
          body: `Vous √™tes arriv√© √† ${destinationName}`,
          data: {
            type: 'arrival',
            destination: destinationName,
          },
          priority: Notifications.AndroidNotificationPriority.HIGH,
          sound: 'default',
          sticky: false,
          ...(Platform.OS === 'android' && {
            channelId: 'navigation',
          }),
        },
        trigger: null,
      });

      // Arr√™ter les notifications de navigation apr√®s l'arriv√©e
      setTimeout(() => {
        this.stopNavigationNotifications();
      }, 5000);

    } catch (error) {
      console.error('Erreur lors de l\'affichage de la notification d\'arriv√©e:', error);
    }
  }

  // Forcer une mise √† jour imm√©diate (utile pour les changements d'√©tape importants)
  static async forceUpdateNotification(
    currentStep: NavigationStep,
    progress: NavigationProgress
  ): Promise<void> {
    if (!this.isNavigationActive) return;

    // Annuler le throttling en cours
    if (this.updateThrottleTimeout) {
      clearTimeout(this.updateThrottleTimeout);
      this.updateThrottleTimeout = null;
    }

    this.pendingUpdate = false;
    await this.performNotificationUpdate(currentStep, progress);
  }

  // V√©rifier si les notifications sont actives
  static isActive(): boolean {
    return this.isNavigationActive;
  }

  // Nettoyer toutes les notifications
  static async clearAllNotifications(): Promise<void> {
    try {
      await Notifications.dismissAllNotificationsAsync();
      this.notificationId = null;
      this.lastNotificationContent = null;
      
      if (this.updateThrottleTimeout) {
        clearTimeout(this.updateThrottleTimeout);
        this.updateThrottleTimeout = null;
      }
      
    } catch (error) {
      console.log('Erreur lors du nettoyage des notifications:', error);
    }
  }

  // Obtenir des statistiques sur les mises √† jour
  static getUpdateStats(): {
    lastUpdateTime: number;
    currentStepIndex: number;
    hasActiveNotification: boolean;
  } {
    return {
      lastUpdateTime: this.lastUpdateData.lastUpdateTime,
      currentStepIndex: this.lastUpdateData.stepIndex,
      hasActiveNotification: this.notificationId !== null,
    };
  }
}